import sys
import os
import math

from src.utility import Utility
from src.config_helper import ConfigHelper
from src.halo_api_caller import HaloAPICaller
from src.json_to_csv import JSONToCSV


class MainOperations(object):

    def initilize_parameters(self):
        Utility.log_stdout(
            "1- Reading and Initializing Configuration Parameters of Custom Image Vulnerabilities Report.")
        config = ConfigHelper()
        json_to_csv_obj = JSONToCSV()
        output_directory = config.output_directory
        Utility.log_stdout("2- Creating HALO API CALLER Object.")
        halo_api_caller_obj = HaloAPICaller(config)
        return halo_api_caller_obj, json_to_csv_obj, output_directory, config

    def check_configs(self, config, halo_api_caller):
        Utility.log_stdout(
            "3- Checking and validating provided configuration parameters")
        halo_api_caller_obj = halo_api_caller
        if halo_api_caller_obj.credentials_work() is False:
            Utility.log_stdout("   Halo credentials are bad!  Exiting!")
            sys.exit(1)

        if config.sane() is False:
            Utility.log_stdout("   Configuration is bad!  Exiting!")
            sys.exit(1)

    def prepare_thread_statistics(self, halo_api_caller_obj):
        Utility.log_stdout(
            "4- Preparing Thread Statistics based on Number of Container Images")
        no_of_container_images = halo_api_caller_obj.get_container_images_statistics()[
            0]
        Utility.log_stdout(
            "   Total Number of Container Images = %s" % no_of_container_images)
        total_no_of_pages = math.ceil(no_of_container_images/100)
        Utility.log_stdout("   Total Number of Pages = %s" % total_no_of_pages)
        total_no_of_threads = math.ceil(no_of_container_images/1000)
        Utility.log_stdout("   Total Number of threads = %s" %
                           total_no_of_threads)
        pages_per_thread = math.ceil(total_no_of_pages/total_no_of_threads)
        Utility.log_stdout("   Pages Per Thread = %s" % pages_per_thread)
        return total_no_of_pages, pages_per_thread

    def get_detailed_list_of_images(self, config, halo_api_caller_obj, json_to_csv_obj, absolute_path, thread_id, pages_list, current_time):
        Utility.log_stdout(
            "6- Reading Image Vulnerabilities Data from the API host")
        Utility.log_stdout("   Thread ID: %s will serve Pages: %s" %
                           (thread_id, pages_list))
        first_page = pages_list[0]
        last_page = pages_list[len(pages_list)-1]
        absolute_path_without_ext = os.path.splitext(absolute_path)[0]
        full_path = "%s_Prt-%s_[Page-%s_Page-%s].csv" % (
            absolute_path_without_ext, thread_id, first_page, last_page)
        header_flag = True
        thread_pages_statistics = [0, 0, 0, 0, 0, 0, 0, 0, 0]
        for page in pages_list:
            self.check_configs(config, halo_api_caller_obj)
            custom_container_images_lst = halo_api_caller_obj.get_container_images(
                page)
            Utility.log_stdout(
                "7- Writing Image Vulnerability data of Page No: [%s] into the output CSV file format." % (page))
            statistics = json_to_csv_obj.write_images_lst_to_csv(
                header_flag, full_path, custom_container_images_lst, current_time)
            thread_pages_statistics[0] += statistics[0]
            thread_pages_statistics[1] += statistics[1]
            thread_pages_statistics[2] += statistics[2]
            thread_pages_statistics[3] += statistics[3]
            thread_pages_statistics[4] += statistics[4]
            thread_pages_statistics[5] += statistics[5]
            thread_pages_statistics[6] += statistics[6]
            thread_pages_statistics[7] += statistics[7]
            thread_pages_statistics[8] += statistics[8]
            header_flag = False
        parent_path, file_name = os.path.split(absolute_path)
        json_to_csv_obj.insert_into_csv(
            full_path, file_name, current_time, thread_pages_statistics)
        return thread_pages_statistics

    def draw_graphs(self, output_directory, json_to_csv_obj, statistics_list):
        Utility.log_stdout(
            "9- Creating Image Vulnerability Graphs to Represent Overall Statistics")
        images_graph_absolute_path = json_to_csv_obj.prepare_images_png_file(
            output_directory)
        Utility.plot_images_pie_graph(
            statistics_list[1], statistics_list[2], images_graph_absolute_path)

        cves_graph_absolute_path = json_to_csv_obj.prepare_cves_png_file(
            output_directory)
        Utility.plot_cves_pie_graph(
            statistics_list[4], statistics_list[5], cves_graph_absolute_path)

        packages_graph_absolute_path = json_to_csv_obj.prepare_packages_png_file(
            output_directory)
        Utility.plot_packages_pie_graph(
            statistics_list[7], statistics_list[8], packages_graph_absolute_path)

        Utility.log_stdout(
            "10- Operation Completed, Check Generated CSV File!")

    def write_overall_report_statistics(self, json_to_csv_obj, absolute_path, file_name, current_time, total_threads_statistics):
        Utility.log_stdout(
            "8- Generating Image Vulnerability Overall Statistics CSV file.")
        absolute_path_without_ext = os.path.splitext(absolute_path)[0]
        statistics_file = "%s_statistics.csv" % (absolute_path_without_ext)
        json_to_csv_obj.write_report_statistics_to_csv(
            statistics_file, file_name, current_time, total_threads_statistics)

    def preparing_report_output_files(self, json_to_csv_obj, output_directory):
        Utility.log_stdout(
            "5- Preparing Empty CSV Files for writing details of container Images.")
        absolute_path, file_name, current_time = json_to_csv_obj.prepare_csv_file(
            output_directory)
        return absolute_path, file_name, current_time
