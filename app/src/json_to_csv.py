import csv
import itertools
import os
from datetime import datetime
from src.utility import Utility


class JSONToCSV(object):

    def prepare_csv_file(self, output_directory):
        # Preparing CSV file for writing
        current_time = Utility.date_to_iso8601(datetime.now())
        file_name = 'image_vulenrability_report_' + current_time + '.csv'
        file_name = file_name.replace(':', '-')
        if output_directory == "":
            absolute_path = file_name
        else:
            absolute_path = output_directory + "/" + file_name
        return absolute_path, file_name, current_time

    def prepare_images_png_file(self, output_directory):
        # Preparing images png file for writing
        current_time = Utility.date_to_iso8601(datetime.now())
        file_name = 'image_vulenrability_images-graph_' + current_time + '.png'
        file_name = file_name.replace(':', '-')
        if output_directory == "":
            absolute_path = file_name
        else:
            absolute_path = output_directory + "/" + file_name
        return absolute_path

    def prepare_cves_png_file(self, output_directory):
        # Preparing cves png file for writing
        current_time = Utility.date_to_iso8601(datetime.now())
        file_name = 'image_vulenrability_cves-graph_' + current_time + '.png'
        file_name = file_name.replace(':', '-')
        if output_directory == "":
            absolute_path = file_name
        else:
            absolute_path = output_directory + "/" + file_name
        return absolute_path

    def prepare_packages_png_file(self, output_directory):
        # Preparing software packages png file for writing
        current_time = Utility.date_to_iso8601(datetime.now())
        file_name = 'image_vulenrability_packages-graph_' + current_time + '.png'
        file_name = file_name.replace(':', '-')
        if output_directory == "":
            absolute_path = file_name
        else:
            absolute_path = output_directory + "/" + file_name
        return absolute_path

    def prepare_report_statistics(self, json_object):
        json_data = json_object[0]
        container_images_data = json_data['container_images']
        page_vulerable_images = 0
        page_non_vulerable_images = 0
        for container_image in container_images_data:
            if container_image['vulnerable']:
                page_vulerable_images += 1
            else:
                page_non_vulerable_images += 1

        return page_vulerable_images, page_non_vulerable_images

    def write_images_lst_to_csv(self, header_flag, absolute_path, images_lst, current_time):
        total_no_of_images = 0
        no_of_vulnerable_images = 0
        no_of_non_vulnerable_images = 0
        total_no_of_cves = 0
        no_of_critical_cves = 0
        no_of_non_critical_cves = 0
        total_no_of_software_packages = 0
        no_of_vulnerable_software_packages = 0
        no_of_non_vulnerable_software_packages = 0

        parent_path, file_name = os.path.split(absolute_path)
        container_images_data = images_lst[0]
        total_no_of_images = len(container_images_data)
        EMPTY_VAL = ''
        EMPTY_ROW = [
            EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
            EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
            EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
            EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
            EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL
        ]

        with open(absolute_path, 'a') as data_file:
            csv_writer = csv.writer(data_file, lineterminator='\n')
            for container_image in container_images_data:
                if (container_image['vulnerable']):
                    no_of_vulnerable_images += 1
                else:
                    no_of_non_vulnerable_images += 1
                # counter variable used for writing headers to the CSV file
                if header_flag:
                    # Writing headers of CSV file
                    header = ['Image ID', 'Repository Name', 'Registry Name', 'URI', 'Inspection Status',
                              'Running Containers', 'Last Scan Date', 'Imported Date ', 'Created Date', 'OS Distribution',
                              'OS Version ', 'Size', 'Tags',
                              'CVE ID', 'CVSS Base Score', 'Criticality', 'Remotely Exploitable', 'Packages Impacted',
                              'CVE Description', 'Suppressed', 'Package Name', 'Platform', 'Version', 'Vulnerable']
                    csv_writer.writerow(header)
                    header_flag = False

                # Writing Container Image Separator Row
                csv_writer.writerow(EMPTY_ROW)

                # Writing container image data into csv file
                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                          container_image['uri'], container_image['inspection_status'], container_image[
                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                    container_image['size'], container_image['tags']]

                # case 1: container image has neither cves nor software packages installed
                if(len(container_image['cves']) == 0 and len(container_image['packages']) == 0):
                    csv_writer.writerow(values)

                # case 2: container image has both cves and software packages installed
                if(len(container_image['cves']) >= 1 and len(container_image['packages']) >= 1):
                    full_row = True
                    cve_id = EMPTY_VAL
                    cvss_base_score = EMPTY_VAL
                    criticality = EMPTY_VAL
                    remotely_exploitable = EMPTY_VAL
                    packages_impacted = EMPTY_VAL
                    cve_description = EMPTY_VAL
                    suppressed = EMPTY_VAL
                    package_name = EMPTY_VAL
                    platform = EMPTY_VAL
                    version = EMPTY_VAL
                    vulnerable = EMPTY_VAL
                    for container_image_cve_package in itertools.zip_longest(container_image['cves'], container_image['packages']):
                        if(container_image_cve_package[0] is None):
                            container_image_cve = []
                        else:
                            container_image_cve = container_image_cve_package[0]
                        if(container_image_cve_package[1] is None):
                            container_image_package = []
                        else:
                            container_image_package = container_image_cve_package[1]

                        for cve_package_item in itertools.zip_longest(container_image_cve, container_image_package):
                            if(cve_package_item[0] is not None):
                                cve_id = cve_package_item[0]['id']
                                cvss_base_score = cve_package_item[0]['cvss']
                                criticality = cve_package_item[0]['critical']

                                total_no_of_cves += 1
                                if(criticality):
                                    no_of_critical_cves += 1
                                else:
                                    no_of_non_critical_cves += 1

                                remotely_exploitable = cve_package_item[0]['remotely_exploitable']
                                packages_impacted = cve_package_item[0]['packages_impacted']
                                cve_description = cve_package_item[0]['description']
                                suppressed = cve_package_item[0]['suppressed']
                            else:
                                cve_id = EMPTY_VAL
                                cvss_base_score = EMPTY_VAL
                                criticality = EMPTY_VAL
                                remotely_exploitable = EMPTY_VAL
                                packages_impacted = EMPTY_VAL
                                cve_description = EMPTY_VAL
                                suppressed = EMPTY_VAL

                            if(cve_package_item[1] is not None):
                                package_name = cve_package_item[1]['name']
                                platform = cve_package_item[1]['platform']
                                version = cve_package_item[1]['version']
                                vulnerable = cve_package_item[1]['vulnerable']

                                total_no_of_software_packages += 1
                                if(vulnerable):
                                    no_of_vulnerable_software_packages += 1
                                else:
                                    no_of_non_vulnerable_software_packages += 1

                            else:
                                package_name = EMPTY_VAL
                                platform = EMPTY_VAL
                                version = EMPTY_VAL
                                vulnerable = EMPTY_VAL
                            # Writing container image cve data to CSV file
                            if(full_row):
                                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                                          container_image['uri'], container_image['inspection_status'], container_image[
                                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                                    container_image['size'], container_image['tags'],
                                    cve_id, cvss_base_score,
                                    criticality, remotely_exploitable,
                                    packages_impacted, cve_description,
                                    suppressed, package_name, platform, version, vulnerable]
                                full_row = False
                            else:
                                values = [EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          cve_id, cvss_base_score,
                                          criticality, remotely_exploitable,
                                          packages_impacted, cve_description,
                                          suppressed, package_name, platform, version, vulnerable]
                            csv_writer.writerow(values)
                if(len(container_image['cves']) == 0 and len(container_image['packages']) >= 1):
                    full_row = True
                    for container_image_package in container_image['packages']:
                        for package_item in container_image_package:
                            total_no_of_software_packages += 1
                            if(package_item['vulnerable']):
                                no_of_vulnerable_software_packages += 1
                            else:
                                no_of_non_vulnerable_software_packages += 1
                            # Writing container image cve data to CSV file
                            if(full_row):
                                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                                          container_image['uri'], container_image['inspection_status'], container_image[
                                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                                    container_image['size'], container_image['tags'],
                                    EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                    EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                    EMPTY_VAL, package_item['name'], package_item['platform'], package_item['version'], package_item['vulnerable']]
                                full_row = False
                            else:
                                values = [EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, package_item['name'], package_item['platform'], package_item['version'], package_item['vulnerable']]
                            csv_writer.writerow(values)
                if(len(container_image['cves']) >= 1 and len(container_image['packages']) == 0):
                    full_row = True
                    for container_image_cve in container_image['cves']:
                        for cve_item in container_image_cve:

                            total_no_of_cves += 1
                            if(cve_item['critical']):
                                no_of_critical_cves += 1
                            else:
                                no_of_non_critical_cves += 1

                            # Writing container image cve data to CSV file
                            if(full_row):
                                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                                          container_image['uri'], container_image['inspection_status'], container_image[
                                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                                    container_image['size'], container_image['tags'],
                                    cve_item['id'], cve_item['cvss'], cve_item['critical'],
                                    cve_item['remotely_exploitable'], cve_item['packages_impacted'],
                                    cve_item['description'], cve_item['suppressed'], EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL]
                                full_row = False
                            else:
                                values = [EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          EMPTY_VAL, EMPTY_VAL, EMPTY_VAL,
                                          cve_item['id'], cve_item['cvss'], cve_item['critical'],
                                          cve_item['remotely_exploitable'], cve_item['packages_impacted'], cve_item['description'],
                                          cve_item['suppressed'], EMPTY_VAL, EMPTY_VAL, EMPTY_VAL, EMPTY_VAL]
                            csv_writer.writerow(values)
            data_file.close()
            statistics = []
            statistics.append(total_no_of_images)
            statistics.append(no_of_vulnerable_images)
            statistics.append(no_of_non_vulnerable_images)
            statistics.append(total_no_of_cves)
            statistics.append(no_of_critical_cves)
            statistics.append(no_of_non_critical_cves)
            statistics.append(total_no_of_software_packages)
            statistics.append(no_of_vulnerable_software_packages)
            statistics.append(no_of_non_vulnerable_software_packages)
            return statistics

    def insert_into_csv(self, input_file_path, file_name, current_time, overall_statistics_lst):
        splitter_row = [
            "# -------------------------------------------------------------------------------------- #"]
        creation_time_row = ["# Report Generated at: %s" % (current_time)]
        report_name_row = ["# Report Name: %s" % (file_name)]

        total_rows = overall_statistics_lst[0]
        row_1 = ["# Number of Container Images= [%s]" % (total_rows)+" Images"]
        no_of_vulnerable_images = overall_statistics_lst[1]
        percetage_of_vulnerable_images = round(
            ((no_of_vulnerable_images/total_rows)*100), 2)
        row_2 = ["# Number of Vulnerable Container Images= [%s] Images - Percentage of Vulnerable Images = [%s]" %
                 (no_of_vulnerable_images, percetage_of_vulnerable_images)+" %"]
        no_of_non_vulnerable_images = overall_statistics_lst[2]
        percetage_of_non_vulnerable_images = round(
            ((no_of_non_vulnerable_images/total_rows)*100), 2)
        row_3 = ["# Number of Non-Vulnerable Container Images= [%s] Images - Percentage of Non Vulnerable Images = [%s]" %
                 (no_of_non_vulnerable_images, percetage_of_non_vulnerable_images)+" %"]

        total_no_of_cves = overall_statistics_lst[3]
        row_4 = ["# Number of CVEs = [%s]" % (total_no_of_cves)]
        no_of_critical_cves = overall_statistics_lst[4]
        percetage_of_critical_cves = round(
            ((no_of_critical_cves/total_no_of_cves)*100), 2)
        row_5 = ["# Number of Critical CVEs = [%s] - Percetage of Critical CVEs = [%s]" %
                 (no_of_critical_cves, percetage_of_critical_cves) + " %"]
        no_of_non_critical_cves = overall_statistics_lst[5]
        percetage_of_non_critical_cves = round(
            ((no_of_non_critical_cves/total_no_of_cves)*100), 2)
        row_6 = ["# Number of Non Critical CVEs = [%s] - Percetage of Non Critical CVEs = [%s]" %
                 (no_of_non_critical_cves, percetage_of_non_critical_cves) + " %"]

        total_no_of_software_packages = overall_statistics_lst[6]
        row_7 = ["# Number of Software Packages = [%s]" %
                 (total_no_of_software_packages)]
        no_of_vulnerable_software_packages = overall_statistics_lst[7]
        percetage_of_vulnerable_software_packages = round(
            ((no_of_vulnerable_software_packages/total_no_of_software_packages)*100), 2)
        row_8 = ["# Number of Vulnerable Software Packages = [%s] - Percetage of Vulnerable Software Packages = [%s]" %
                 (no_of_vulnerable_software_packages, percetage_of_vulnerable_software_packages) + " %"]
        no_of_non_vulnerable_software_packages = overall_statistics_lst[8]
        percetage_of_non_vulnerable_software_packages = round(
            ((no_of_non_vulnerable_software_packages/total_no_of_software_packages)*100), 2)
        row_9 = ["# Number of Non Vulnerable Software Packages = [%s] - Percetage of Non Vulnerable Software Packages = [%s]" %
                 (no_of_non_vulnerable_software_packages, percetage_of_non_vulnerable_software_packages) + " %"]

        with open(input_file_path, 'r') as readFile:
            reader = csv.reader(readFile)
            lines = list(reader)
            lines.insert(0, splitter_row)
            lines.insert(1, report_name_row)
            lines.insert(2, creation_time_row)
            lines.insert(3, splitter_row)
            lines.insert(4, row_1)
            lines.insert(5, row_2)
            lines.insert(6, row_3)
            lines.insert(7, splitter_row)
            lines.insert(8, row_4)
            lines.insert(9, row_5)
            lines.insert(10, row_6)
            lines.insert(11, splitter_row)
            lines.insert(12, row_7)
            lines.insert(13, row_8)
            lines.insert(14, row_9)
            lines.insert(15, splitter_row)
        with open(input_file_path, 'w', newline='') as writeFile:
            writer = csv.writer(writeFile)
            writer.writerows(lines)

        readFile.close()
        writeFile.close()

    def write_report_statistics_to_csv(self, absolute_path, file_name, current_time, overall_statistics_lst):
        total_rows = overall_statistics_lst[0]
        no_of_vulnerable_images = overall_statistics_lst[1]
        no_of_non_vulnerable_images = overall_statistics_lst[2]
        total_no_of_cves = overall_statistics_lst[3]
        no_of_critical_cves = overall_statistics_lst[4]
        no_of_non_critical_cves = overall_statistics_lst[5]
        total_no_of_software_packages = overall_statistics_lst[6]
        no_of_vulnerable_software_packages = overall_statistics_lst[7]
        no_of_non_vulnerable_software_packages = overall_statistics_lst[8]

        with open(absolute_path, 'a') as data_file:
            csv_writer = csv.writer(data_file, lineterminator='\n')
            csv_writer.writerow(
                ["# -------------------------------------------------------------------------------------- #"])
            csv_writer.writerow(["# Report Name: %s" % (file_name)])

            csv_writer.writerow(
                ["# Report Generated at: %s" % (current_time)])

            csv_writer.writerow(
                ["# -------------------------------------------------------------------------------------- #"])

            csv_writer.writerow(
                ["# Total Number of Container Images= [%s]" % (total_rows)+" Images"])

            percetage_of_vulnerable_images = round(
                ((no_of_vulnerable_images/total_rows)*100), 2)
            csv_writer.writerow(
                ["# Total Number of Vulnerable Container Images= [%s] Images - Percentage of Vulnerable Images = [%s]" % (no_of_vulnerable_images, percetage_of_vulnerable_images)+" %"])

            percetage_of_non_vulnerable_images = round(
                ((no_of_non_vulnerable_images/total_rows)*100), 2)
            csv_writer.writerow(
                ["# Total Number of Non-Vulnerable Container Images= [%s] Images - Percentage of Non Vulnerable Images = [%s]" % (no_of_non_vulnerable_images, percetage_of_non_vulnerable_images)+" %"])

            csv_writer.writerow(
                ["# -------------------------------------------------------------------------------------- #"])

            percetage_of_critical_cves = round(
                ((no_of_critical_cves/total_no_of_cves)*100), 2)
            percetage_of_non_critical_cves = round(
                ((no_of_non_critical_cves/total_no_of_cves)*100), 2)
            row_1 = ["# Total Number of CVEs = [%s]" % (total_no_of_cves)]
            row_2 = ["# Number of Critical CVEs = [%s] - Percetage of Critical CVEs = [%s]" %
                     (no_of_critical_cves, percetage_of_critical_cves) + " %"]
            row_3 = ["# Number of Non Critical CVEs = [%s] - Percetage of Non Critical CVEs = [%s]" %
                     (no_of_non_critical_cves, percetage_of_non_critical_cves) + " %"]
            csv_writer.writerow(row_1)
            csv_writer.writerow(row_2)
            csv_writer.writerow(row_3)

            csv_writer.writerow(
                ["# -------------------------------------------------------------------------------------- #"])

            percetage_of_vulnerable_software_packages = round(
                ((no_of_vulnerable_software_packages/total_no_of_software_packages)*100), 2)
            percetage_of_non_vulnerable_software_packages = round(
                ((no_of_non_vulnerable_software_packages/total_no_of_software_packages)*100), 2)
            row_4 = ["# Total Number of Software Packages = [%s]" %
                     (total_no_of_software_packages)]
            row_5 = ["# Number of Vulnerable Software Packages = [%s] - Percetage of Vulnerable Software Packages = [%s]" %
                     (no_of_vulnerable_software_packages, percetage_of_vulnerable_software_packages) + " %"]
            row_6 = ["# Number of Non Vulnerable Software Packages = [%s] - Percetage of Non Vulnerable Software Packages = [%s]" %
                     (no_of_non_vulnerable_software_packages, percetage_of_non_vulnerable_software_packages) + " %"]
            csv_writer.writerow(row_4)
            csv_writer.writerow(row_5)
            csv_writer.writerow(row_6)
            csv_writer.writerow(
                ["# -------------------------------------------------------------------------------------- #"])

            data_file.close()
