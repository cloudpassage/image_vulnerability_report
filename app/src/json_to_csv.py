import csv
import itertools
from datetime import datetime
from src.utility import Utility


class JSONToCSV(object):

    def prepare_csv_file(self, output_directory):
        # Preparing CSV file for writing
        current_time = Utility.date_to_iso8601(datetime.now())
        file_name = 'image_vulenrability_report_' + current_time + '.csv'
        file_name = file_name.replace(':', '-')
        if output_directory == "":
            absolute_path = file_name
        else:
            absolute_path = output_directory + "/" + file_name
        return absolute_path, file_name, current_time
    
    def prepare_png_file(self, output_directory):
        # Preparing png file for writing
        current_time = Utility.date_to_iso8601(datetime.now())
        file_name = 'image_vulenrability_graph_' + current_time + '.png'
        file_name = file_name.replace(':', '-')
        if output_directory == "":
            absolute_path = file_name
        else:
            absolute_path = output_directory + "/" + file_name
        return absolute_path

    def prepare_report_statistics(self, json_object):
        json_data = json_object[0]
        container_images_data = json_data['container_images']
        page_vulerable_images = 0
        page_non_vulerable_images = 0
        for container_image in container_images_data:
            if container_image['vulnerable']:
                page_vulerable_images += 1
            else:
                page_non_vulerable_images += 1

        return page_vulerable_images, page_non_vulerable_images

    def convert_json_to_csv(self, counter, absolute_path, file_name, current_time, json_object, no_of_vulnerable_images, no_of_non_vulnerable_images):
        container_images_data = json_object[0]
        total_rows = len(container_images_data)
        CONST_EMPTY_VAL = ''
        EMPTY_ROW = ['', '', '', '', '', '', '', '', '', '', ' ', '', '', '', '', '', '', '', '', '', '', '', '', '']
        with open(absolute_path, 'a') as data_file:
            csv_writer = csv.writer(data_file, lineterminator='\n')
            for container_image in container_images_data:
                # counter variable used for writing headers to the CSV file
                if counter == 0:
                    csv_writer.writerow(
                        ["# -------------------------------------------------------------------------------------- #"])
                    csv_writer.writerow(["# Report Name: %s" % (file_name)])
                    csv_writer.writerow(
                        ["# Report Generated at: %s" % (current_time)])
                    csv_writer.writerow(
                        ["# Total Number of Vulnerable Container Images= [%s]" % (no_of_vulnerable_images)+" Images"])
                    csv_writer.writerow(
                        ["# Total Number of Non-Vulnerable Container Images= [%s]" % (no_of_non_vulnerable_images)+" Images"])
                    csv_writer.writerow(
                        ["# Total Number of Container Images= [%s]" % (total_rows)+" Images"])
                    csv_writer.writerow(
                        ["# -------------------------------------------------------------------------------------- #"])
                    
                    # Writing headers of CSV file
                    header = ['Image ID', 'Repository Name', 'Registry Name', 'URI', 'Inspection Status',
                              'Running Containers', 'Last Scan Date', 'Imported Date ', 'Created Date', 'OS Distribution',
                              'OS Version ', 'Size', 'Tags',
                              'CVE ID', 'CVSS Base Score', 'Criticality', 'Remotely Exploitable', 'Packages Impacted',
                              'CVE Description', 'Suppressed', 'Package Name', 'Platform', 'Version', 'Vulnerable']
                    csv_writer.writerow(EMPTY_ROW)
                    csv_writer.writerow(header)
                    csv_writer.writerow(EMPTY_ROW)
                    counter += 1
                
                # Writing Container Image Separator Row
                csv_writer.writerow(EMPTY_ROW)

                # Writing container image data into csv file
                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                          container_image['uri'], container_image['inspection_status'], container_image[
                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                    container_image['size'], container_image['tags']]

                # case 1: container image has neither cves nor software packages installed
                if(len(container_image['cves']) == 0 and len(container_image['packages']) == 0):
                    csv_writer.writerow(values)

                # case 2: container image has both cves and software packages installed
                if(len(container_image['cves']) >= 1 and len(container_image['packages']) >= 1):
                    full_row = True
                    cve_id = ''
                    cvss_base_score = ''
                    criticality = ''
                    remotely_exploitable = ''
                    packages_impacted = ''
                    cve_description = ''
                    suppressed = ''
                    package_name = ''
                    platform = ''
                    version = ''
                    vulnerable = ''
                    for container_image_cve_package in itertools.zip_longest(container_image['cves'], container_image['packages']):
                        if(container_image_cve_package[0] is None):
                            container_image_cve = []
                        else:
                            container_image_cve = container_image_cve_package[0]
                        if(container_image_cve_package[1] is None):
                            container_image_package = []
                        else:
                            container_image_package = container_image_cve_package[1]

                        for cve_package_item in itertools.zip_longest(container_image_cve, container_image_package):
                            if(cve_package_item[0] is not None):
                                cve_id = cve_package_item[0]['id']
                                cvss_base_score = cve_package_item[0]['cvss']
                                criticality = cve_package_item[0]['critical']
                                remotely_exploitable = cve_package_item[0]['remotely_exploitable']
                                packages_impacted = cve_package_item[0]['packages_impacted']
                                cve_description = cve_package_item[0]['description']
                                suppressed = cve_package_item[0]['suppressed']
                            else:
                                cve_id = ''
                                cvss_base_score = ''
                                criticality = ''
                                remotely_exploitable = ''
                                packages_impacted = ''
                                cve_description = ''
                                suppressed = ''

                            if(cve_package_item[1] is not None):
                                package_name = cve_package_item[1]['name']
                                platform = cve_package_item[1]['platform']
                                version = cve_package_item[1]['version']
                                vulnerable = cve_package_item[1]['vulnerable']
                            else:
                                package_name = ''
                                platform = ''
                                version = ''
                                vulnerable = ''
                            # Writing container image cve data to CSV file
                            if(full_row):
                                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                                          container_image['uri'], container_image['inspection_status'], container_image[
                                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                                    container_image['size'], container_image['tags'],
                                    cve_id, cvss_base_score,
                                    criticality, remotely_exploitable,
                                    packages_impacted, cve_description,
                                    suppressed, package_name, platform, version, vulnerable]
                                full_row = False
                            else:
                                values = [CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          cve_id, cvss_base_score,
                                          criticality, remotely_exploitable,
                                          packages_impacted, cve_description,
                                          suppressed, package_name, platform, version, vulnerable]
                            csv_writer.writerow(values)
                if(len(container_image['cves']) == 0 and len(container_image['packages']) >= 1):
                    full_row = True
                    for container_image_package in container_image['packages']:
                        for package_item in container_image_package:
                            # Writing container image cve data to CSV file
                            if(full_row):
                                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                                          container_image['uri'], container_image['inspection_status'], container_image[
                                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                                    container_image['size'], container_image['tags'],
                                    CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                    CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                    CONST_EMPTY_VAL, package_item['name'], package_item['platform'], package_item['version'], package_item['vulnerable']]
                                full_row = False
                            else:
                                values = [CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, package_item['name'], package_item['platform'], package_item['version'], package_item['vulnerable']]
                            csv_writer.writerow(values)
                if(len(container_image['cves']) >= 1 and len(container_image['packages']) == 0):
                    full_row = True
                    for container_image_cve in container_image['cves']:
                        for cve_item in container_image_cve:
                            # Writing container image cve data to CSV file
                            if(full_row):
                                values = [container_image['id'], container_image['repository_name'], container_image['registry_name'],
                                          container_image['uri'], container_image['inspection_status'], container_image[
                                    'in_use'], container_image['last_scan_at'], container_image['imported_at'],
                                    container_image['created_at'], container_image['os_distribution'], container_image['os_version'],
                                    container_image['size'], container_image['tags'],
                                    cve_item['id'], cve_item['cvss'], cve_item['critical'],
                                    cve_item['remotely_exploitable'], cve_item['packages_impacted'],
                                    cve_item['description'], cve_item['suppressed'], CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL]
                                full_row = False
                            else:
                                values = [CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL,
                                          cve_item['id'], cve_item['cvss'], cve_item['critical'],
                                          cve_item['remotely_exploitable'], cve_item['packages_impacted'], cve_item['description'],
                                          cve_item['suppressed'], CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL, CONST_EMPTY_VAL]
                            csv_writer.writerow(values)
            data_file.close()
