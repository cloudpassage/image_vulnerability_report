import base64
import json
import urllib.parse
import urllib.request
import math
import cloudpassage
from src.utility import Utility


class HaloAPICaller(object):

    def __init__(self, config):
        self.halo_api_auth_url = config.halo_api_auth_url
        self.halo_api_auth_args = config.halo_api_auth_args
        self.halo_api_hostname = config.halo_api_hostname
        self.halo_api_version = config.halo_api_version
        self.halo_api_port = int(config.halo_api_port)
        self.halo_api_key_id = config.halo_api_key_id
        self.halo_api_key_secret = config.halo_api_key_secret
        self.halo_api_auth_token = config.halo_api_auth_token
        self.output_directory = config.output_directory

    # Dump debug info
    @classmethod
    def dump_token(cls, token, expires):
        if token:
            Utility.log_stdout("AuthToken=%s" % token)
        if expires:
            Utility.log_stdout("Expires in %s minutes" % (expires / 60))

    @classmethod
    def get_http_status(cls, code):
        if code == 200:
            return "OK"
        elif code == 401:
            return "Unauthorized"
        elif code == 403:
            return "Forbidden"
        elif code == 404:
            return "Not found"
        elif code == 422:
            return "Validation failed"
        elif code == 500:
            return "Internal server error"
        elif code == 502:
            return "Gateway error"
        else:
            return "Unknown code [%d]" % code

    # add authentication token into the request
    @classmethod
    def add_auth(cls, req, kid, sec):
        combined = kid + ":" + sec
        combined_bytes = combined.encode("utf-8")
        encoded = base64.b64encode(combined_bytes)
        encoded_str = encoded.decode("utf-8")
        req.add_header("Authorization", "Basic " + encoded_str)

    def get_auth_token(self, url, args, kid, sec):
        req = urllib.request.Request(url)
        self.add_auth(req, kid, sec)
        if args:
            args = urllib.parse.urlencode(args).encode("utf-8")
        try:
            fh = urllib.request.urlopen(req, data=args)
            return fh.read()
        except IOError as e:
            if hasattr(e, 'reason'):
                Utility.log_stderr(
                    "Failed to connect [%s] to '%s'" % (e.reason, url))
            elif hasattr(e, 'code'):
                msg = self.get_http_status(e.code)
                Utility.log_stderr(
                    "Failed to authorize [%s] at '%s'" % (msg, url))
                data = e.read()
                if data:
                    Utility.log_stderr("Extra data: %s" % data)
                Utility.log_stderr(
                    "Likely cause: incorrect API keys, id=%s" % kid)
            else:
                Utility.log_stderr("Unknown error fetching '%s'" % url)
            return None

    def do_get_request(self, url, token):
        req = urllib.request.Request(url)
        req.add_header("Authorization", "Bearer " + token)
        try:
            fh = urllib.request.urlopen(req)
            return fh.read(), False
        except IOError as e:
            auth_error = False
            if hasattr(e, 'reason'):
                Utility.log_stderr(
                    "Failed to connect [%s] to '%s'" % (e.reason, url))
            elif hasattr(e, 'code'):
                msg = self.get_http_status(e.code)
                Utility.log_stderr(
                    "Failed to fetch events [%s] from '%s'" % (msg, url))
                if e.code == 401:
                    auth_error = True
            else:
                Utility.log_stderr("Unknown error fetching '%s'" % url)
            return None, auth_error

    def do_put_request(self, url, token, put_data):
        opener = urllib.request.build_opener(urllib.request.HTTPHandler)
        req = urllib.request.Request(url, data=put_data.encode("utf-8"))
        req.add_header("Authorization", "Bearer " + token)
        req.add_header("Content-Type", "application/json")
        req.get_method = lambda: 'PUT'
        try:
            fh = opener.open(req)
            return fh.read(), False
        except IOError as e:
            auth_error = False
            if hasattr(e, 'reason'):
                Utility.log_stderr(
                    "Failed to connect [%s] to '%s'" % (e.reason, url))
            if hasattr(e, 'code'):
                msg = self.get_http_status(e.code)
                Utility.log_stderr(
                    "Failed to make request: [%s] from '%s'" % (msg, url))
                if e.code == 401:
                    auth_error = True
            if (not hasattr(e, 'reason')) and (not hasattr(e, 'code')):
                Utility.log_stderr("Unknown error fetching '%s'" % url)
            return None, auth_error

    def do_post_request(self, url, token, post_data):
        opener = urllib.request.build_opener(urllib.request.HTTPHandler)
        req = urllib.request.Request(url, data=post_data.encode("utf-8"))
        req.add_header("Authorization", "Bearer " + token)
        req.add_header("Content-Type", "application/json")
        try:
            fh = opener.open(req)
            return fh.read(), False
        except IOError as e:
            auth_error = False
            if hasattr(e, 'reason'):
                Utility.log_stderr(
                    "Failed to connect [%s] to '%s'" % (e.reason, url))
            if hasattr(e, 'code'):
                msg = self.get_http_status(e.code)
                Utility.log_stderr(
                    "Failed to make request: [%s] from '%s'" % (msg, url))
                if e.code == 401:
                    auth_error = True
            if (not hasattr(e, 'reason')) and (not hasattr(e, 'code')):
                Utility.log_stderr("Unknown error fetching '%s'" % url)
            return None, auth_error

    def authenticate_client(self):
        url = "%s:%d/%s" % (self.halo_api_hostname,
                            self.halo_api_port, self.halo_api_auth_url)
        response = self.get_auth_token(
            url, self.halo_api_auth_args, self.halo_api_key_id, self.halo_api_key_secret)
        if response:
            auth_resp_obj = json.loads(response)
            if 'access_token' in auth_resp_obj:
                self.halo_api_auth_token = auth_resp_obj['access_token']
            if 'expires_in' in auth_resp_obj:
                self.expires = auth_resp_obj['expires_in']
        return self.halo_api_auth_token

    def get_container_images_statistics(self):
        url = "%s:%d/%s/container_images" % (
            self.halo_api_hostname, self.halo_api_port, self.halo_api_version)
        (data, auth_error) = self.do_get_request(url, self.halo_api_auth_token)
        if data:
            data_in_json = json.loads(data)
            no_of_container_images = 0
            no_of_container_images = data_in_json['count']
            return no_of_container_images, auth_error
        else:
            return None, auth_error

    def get_container_images(self, page):
        url = "%s:%d/%s/container_images?per_page=100&page=%s" % (
            self.halo_api_hostname, self.halo_api_port, self.halo_api_version, page)
        (data, auth_error) = self.do_get_request(url, self.halo_api_auth_token)
        if data:
            container_images_lst = json.loads(data)
            container_images_data = container_images_lst['container_images']
            modified_container_images_list = []
            image_index = 0
            for container_image in container_images_data:
                image_index += 1
                Utility.log_stdout(
                    "   Reading Image Vulnerabilities Data for image No: [%s] in Page No: [%s]" % (image_index, page))
                modified_container_image_item = container_image

                image_cve_json_data = self.get_image_CVEs(
                    container_image['id'])
                image_cve_lst = image_cve_json_data[0]
                try:
                    no_of_image_cves = image_cve_lst['count']
                except:
                    no_of_image_cves = 0
                cve_pages = math.ceil(no_of_image_cves/100)
                cves_array = []
                for cve_page in range(cve_pages):
                    current_cve_page = cve_page+1
                    Utility.log_stdout("   Reading details of the list of the CVEs in CVE Page No: [%s] of the container image No: [%s] in Image Page No: [%s]" % (
                        current_cve_page, image_index, page))
                    paged_image_cve_json_data = self.get_image_CVEs_per_pag(
                        container_image['id'], current_cve_page)
                    paged_image_cve_lst = paged_image_cve_json_data[0]
                    try:
                        paged_image_cve_data = paged_image_cve_lst['cves']
                    except:
                        paged_image_cve_data = []
                    cves_array.append(paged_image_cve_data)
                modified_container_image_item['cves'] = cves_array

                image_package_json_data = self.get_image_software_packages(
                    container_image['id'])
                image_package_lst = image_package_json_data[0]
                try:
                    no_of_image_packages = image_package_lst['count']
                except:
                    no_of_image_packages = 0
                package_pages = math.ceil(no_of_image_packages/100)
                packages_array = []
                for package_page in range(package_pages):
                    current_package_page = package_page+1
                    Utility.log_stdout("   Reading details of the list of the software packages in Package Page No: [%s] of the contianer image No: [%s] in Image Page No: [%s]" % (
                        current_package_page, image_index, page))
                    paged_image_package_json_data = self.get_image_software_packages_per_page(
                        container_image['id'], current_package_page)
                    paged_image_package_lst = paged_image_package_json_data[0]
                    try:
                        paged_image_package_data = paged_image_package_lst['packages']
                    except:
                        paged_image_package_data = []
                    packages_array.append(paged_image_package_data)
                modified_container_image_item['packages'] = packages_array

                modified_container_images_list.append(
                    modified_container_image_item)
            Utility.log_stdout(
                "   Finished reading details of the list of container images from the API host")
            return modified_container_images_list, auth_error
        else:
            return None, auth_error

    def get_image_CVEs(self, image_id):
        url = "%s:%d/%s/container_images/%s/cves" % (
            self.halo_api_hostname, self.halo_api_port, self.halo_api_version, image_id)
        (data, auth_error) = self.do_get_request(url, self.halo_api_auth_token)
        if data:
            return json.loads(data), auth_error
        else:
            return None, auth_error

    def get_image_CVEs_per_pag(self, image_id, page):
        url = "%s:%d/%s/container_images/%s/cves?per_page=100&page=%s" % (
            self.halo_api_hostname, self.halo_api_port, self.halo_api_version, image_id, page)
        (data, auth_error) = self.do_get_request(url, self.halo_api_auth_token)
        if data:
            return json.loads(data), auth_error
        else:
            return None, auth_error

    def get_image_software_packages(self, image_id):
        url = "%s:%d/%s/container_images/%s/packages" % (
            self.halo_api_hostname, self.halo_api_port, self.halo_api_version, image_id)
        (data, auth_error) = self.do_get_request(url, self.halo_api_auth_token)
        if data:
            return json.loads(data), auth_error
        else:
            return None, auth_error

    def get_image_software_packages_per_page(self, image_id, page):
        url = "%s:%d/%s/container_images/%s/packages?per_page=100&page=%s" % (
            self.halo_api_hostname, self.halo_api_port, self.halo_api_version, image_id, page)
        (data, auth_error) = self.do_get_request(url, self.halo_api_auth_token)
        if data:
            return json.loads(data), auth_error
        else:
            return None, auth_error

    def credentials_work(self):
        """
        Attempts to authenticate against Halo API
        """

        good = True
        try:
            self.authenticate_client()
        except cloudpassage.CloudPassageAuthentication:
            good = False
        return good
