import sys
import math

from src import config_helper
from src import halo_api_caller
from src import utility
from src import json_to_csv


def main():
    utility.Utility.log_stdout(
        "Script for Image Vulnerabilities Report Started ...")
    config = config_helper.ConfigHelper()
    json_to_csv_obj = json_to_csv.JSONToCSV()
    output_directory = config.output_directory

    utility.Utility.log_stdout("1- Creating HALO API CALLER Object.")
    halo_api_caller_obj = halo_api_caller.HaloAPICaller(config)

    """
    First we make sure that all configs are sound...
    """
    utility.Utility.log_stdout(
        "2- Checking the provided configuration parameters")
    check_configs(config, halo_api_caller_obj)

    """
    Preparing Image Vulnerabilities Report Statistics (i.e. Number of Vulnerable Images, Number of Non-Vulnerable Images)
    """
    utility.Utility.log_stdout(
        "3- Preparing Image Vulnerabilities Report Statistics (i.e. Number of Vulnerable Images,Number of Non-Vulnerable Images)")
    no_of_container_images = halo_api_caller_obj.get_container_images_statistics()[
        0]
    pages = math.ceil(no_of_container_images/100)

    absolute_path, file_name, current_time = json_to_csv_obj.prepare_csv_file(
        output_directory)

    total_no_of_vulerable_images = 0
    total_no_of_non_vulerable_images = 0

    for page in range(pages):
        current_page = page+1
        container_images_lst = halo_api_caller_obj.get_container_images(
            current_page)
        page_vulerable_images, page_non_vulerable_images = json_to_csv_obj.prepare_report_statistics(
            container_images_lst)

        total_no_of_vulerable_images += page_vulerable_images
        total_no_of_non_vulerable_images += page_non_vulerable_images

    """
    Reading Image Vulnerabilities data from the API host
    """
    utility.Utility.log_stdout(
        "4- Reading Image Vulnerabilities Data from the API host")
    for page in range(pages):
        counter = page
        current_page = page+1
        custom_container_images_lst = halo_api_caller_obj.get_container_images_custom(
            current_page)
        
        """
        Writing Image Vulnerabilities Data into the output CSV file format
        """
        utility.Utility.log_stdout(
            "5- Writing Image Vulnerability data into the output CSV file format --------- [Batch No - %s]" % (current_page))
        json_to_csv_obj.convert_json_to_csv(counter, absolute_path, file_name, current_time,
                                            custom_container_images_lst, total_no_of_vulerable_images, total_no_of_non_vulerable_images)

    """
    Creating Image Vulnerability Graphs to Represent Overall Statistics
    """
    utility.Utility.log_stdout(
        "6- Creating Image Vulnerability Graphs to Represent Overall Statistics")
    images_graph_absolute_path = json_to_csv_obj.prepare_images_png_file(output_directory)
    utility.Utility.plot_images_pie_graph(total_no_of_vulerable_images, total_no_of_non_vulerable_images, images_graph_absolute_path)
    
    cves_graph_absolute_path = json_to_csv_obj.prepare_cves_png_file(output_directory)
    utility.Utility.plot_cves_pie_graph(json_to_csv_obj.no_of_critical_cves, json_to_csv_obj.no_of_non_critical_cves, cves_graph_absolute_path)
    
    packages_graph_absolute_path = json_to_csv_obj.prepare_packages_png_file(output_directory)
    utility.Utility.plot_packages_pie_graph(json_to_csv_obj.no_of_vulnerable_software_packages, json_to_csv_obj.no_of_non_vulnerable_software_packages, packages_graph_absolute_path)


    """
    Operation Completed
    """
    utility.Utility.log_stdout(
        "7- Operation Completed, Check Generated CSV File!")
    


def check_configs(config, halo_api_caller):
    halo_api_caller_obj = halo_api_caller
    if halo_api_caller_obj.credentials_work() is False:
        utility.Utility.log_stdout("Halo credentials are bad!  Exiting!")
        sys.exit(1)

    if config.sane() is False:
        utility.Utility.log_stdout("Configuration is bad!  Exiting!")
        sys.exit(1)


if __name__ == "__main__":
    main()
