import concurrent.futures
import time
from src import utility
from src import main_operations


def main():
    utility.Utility.log_stdout("Custom Image Vulnerabilities Report")
    main_operations_obj = main_operations.MainOperations()

    """
    # Reading and Initializing Configuration Parameters of Custom Image Vulnerabilities Report.
    """
    halo_api_caller_obj, json_to_csv_obj, output_directory, config = main_operations_obj.initilize_parameters()

    """
    # Checking/validating provided configuration parameters
    """
    main_operations_obj.check_configs(config, halo_api_caller_obj)

    """
    # Prepare Thread Statistics based on Number of Container Images
    """
    total_no_of_pages, pages_per_thread = main_operations_obj.prepare_thread_statistics(
        halo_api_caller_obj)

    """
    # Prepare CSV file for Writing
    """
    absolute_path, file_name, current_time = main_operations_obj.preparing_report_output_file(
        json_to_csv_obj, output_directory)

    """
    # Reading Image Vulnerabilities Data from the API host
    """
    pages_lst = list(range(1, total_no_of_pages+1))
    chunk_size = 5
    if(chunk_size >= len(pages_lst)):
        chunk_size = 1
    thread_id = 0
    total_threads_statistics = [0, 0, 0, 0, 0, 0, 0, 0, 0]
    all_threads_images_list = []
    script_start_time = time.time()
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = []
        for i in range(0, len(pages_lst), chunk_size):
            thread_pages = pages_lst[i:i + chunk_size]
            thread_id += 1
            futures.append(executor.submit(main_operations_obj.get_detailed_list_of_images, config,
                           halo_api_caller_obj, thread_id, thread_pages))
        for future in concurrent.futures.as_completed(futures):
            current_thread_images_list = future.result()
            all_threads_images_list.append(current_thread_images_list)

    """
    # Writing/Exporting container images into the output csv file.
    """
    total_threads_statistics = main_operations_obj.write_all_images_CSV_file(
        json_to_csv_obj, absolute_path, current_time, all_threads_images_list)

    """
    # Creating Image Vulnerability Graphs to Represent Overall Statistics
    """
    main_operations_obj.draw_graphs(
        output_directory, json_to_csv_obj, total_threads_statistics)

    script_end_time = time.time()
    consumed_time = script_end_time - script_start_time
    optimized_consumed_time = round(consumed_time, 3)
    utility.Utility.log_stdout(
        "Total Time Consumed = [%s] seconds" % (optimized_consumed_time))


if __name__ == "__main__":
    main()
